
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_compare_time.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_compare_time.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_compare_time.py:


=============================================
Timing comparison with scikit-learn for Lasso
=============================================
Compare time to solve large scale Lasso problems with scikit-learn.

.. GENERATED FROM PYTHON SOURCE LINES 9-95



.. image-sg:: /auto_examples/images/sphx_glr_plot_compare_time_001.png
   :alt: lasso, enet
   :srcset: /auto_examples/images/sphx_glr_plot_compare_time_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    file_sizes:   0%|                                   | 0.00/26.8M [00:00<?, ?B/s]    file_sizes:   0%|                           | 24.6k/26.8M [00:00<03:33, 125kB/s]    file_sizes:   0%|                           | 49.2k/26.8M [00:00<03:34, 125kB/s]    file_sizes:   0%|                            | 106k/26.8M [00:00<02:13, 200kB/s]    file_sizes:   1%|▏                           | 221k/26.8M [00:00<01:15, 350kB/s]    file_sizes:   2%|▍                           | 451k/26.8M [00:00<00:41, 641kB/s]    file_sizes:   3%|▉                          | 909k/26.8M [00:01<00:21, 1.21MB/s]    file_sizes:   7%|█▊                        | 1.83M/26.8M [00:01<00:10, 2.33MB/s]    file_sizes:  14%|███▌                      | 3.66M/26.8M [00:01<00:08, 2.74MB/s]    file_sizes:  16%|████                      | 4.19M/26.8M [00:02<00:08, 2.51MB/s]    file_sizes:  17%|████▎                     | 4.45M/26.8M [00:02<00:08, 2.49MB/s]    file_sizes:  18%|████▌                     | 4.71M/26.8M [00:02<00:10, 2.11MB/s]    file_sizes:  19%|████▊                     | 4.97M/26.8M [00:02<00:11, 1.93MB/s]    file_sizes:  19%|█████                     | 5.20M/26.8M [00:02<00:12, 1.74MB/s]    file_sizes:  20%|█████▎                    | 5.46M/26.8M [00:03<00:12, 1.75MB/s]    file_sizes:  21%|█████▌                    | 5.73M/26.8M [00:03<00:11, 1.85MB/s]    file_sizes:  22%|█████▊                    | 5.99M/26.8M [00:03<00:10, 1.90MB/s]    file_sizes:  23%|██████                    | 6.18M/26.8M [00:03<00:11, 1.75MB/s]    file_sizes:  24%|██████▎                   | 6.51M/26.8M [00:03<00:10, 2.01MB/s]    file_sizes:  28%|███████▎                  | 7.56M/26.8M [00:04<00:10, 1.80MB/s]    file_sizes:  29%|███████▌                  | 7.82M/26.8M [00:04<00:10, 1.79MB/s]    file_sizes:  30%|███████▊                  | 8.09M/26.8M [00:04<00:10, 1.79MB/s]    file_sizes:  31%|████████                  | 8.35M/26.8M [00:04<00:09, 1.89MB/s]    file_sizes:  32%|████████▎                 | 8.61M/26.8M [00:04<00:09, 1.86MB/s]    file_sizes:  33%|████████▌                 | 8.87M/26.8M [00:04<00:09, 1.81MB/s]    file_sizes:  34%|████████▉                 | 9.17M/26.8M [00:05<00:11, 1.53MB/s]    file_sizes:  35%|█████████                 | 9.36M/26.8M [00:05<00:13, 1.30MB/s]    file_sizes:  36%|█████████▍                | 9.66M/26.8M [00:05<00:12, 1.39MB/s]    file_sizes:  37%|█████████▌                | 9.82M/26.8M [00:05<00:11, 1.43MB/s]    file_sizes:  38%|█████████▊                | 10.1M/26.8M [00:05<00:11, 1.47MB/s]    file_sizes:  38%|█████████▉                | 10.3M/26.8M [00:06<00:12, 1.35MB/s]    file_sizes:  39%|██████████▏               | 10.5M/26.8M [00:06<00:11, 1.45MB/s]    file_sizes:  41%|██████████▋               | 11.1M/26.8M [00:06<00:08, 1.78MB/s]    file_sizes:  42%|██████████▉               | 11.3M/26.8M [00:06<00:11, 1.34MB/s]    file_sizes:  43%|███████████▏              | 11.5M/26.8M [00:06<00:10, 1.43MB/s]    file_sizes:  44%|███████████▍              | 11.8M/26.8M [00:07<00:09, 1.50MB/s]    file_sizes:  45%|███████████▋              | 12.1M/26.8M [00:07<00:09, 1.60MB/s]    file_sizes:  46%|███████████▉              | 12.3M/26.8M [00:07<00:08, 1.64MB/s]    file_sizes:  47%|████████████▏             | 12.6M/26.8M [00:07<00:07, 1.81MB/s]    file_sizes:  48%|████████████▍             | 12.8M/26.8M [00:07<00:07, 1.89MB/s]    file_sizes:  49%|████████████▋             | 13.1M/26.8M [00:07<00:06, 2.00MB/s]    file_sizes:  50%|████████████▉             | 13.4M/26.8M [00:07<00:06, 2.07MB/s]    file_sizes:  51%|█████████████▏            | 13.6M/26.8M [00:07<00:06, 1.95MB/s]    file_sizes:  52%|█████████████▍            | 13.9M/26.8M [00:08<00:06, 2.04MB/s]    file_sizes:  53%|█████████████▋            | 14.1M/26.8M [00:08<00:06, 1.94MB/s]    file_sizes:  54%|█████████████▉            | 14.4M/26.8M [00:08<00:06, 2.01MB/s]    file_sizes:  56%|██████████████▋           | 15.1M/26.8M [00:08<00:04, 2.73MB/s]    file_sizes:  58%|███████████████           | 15.5M/26.8M [00:08<00:06, 1.70MB/s]    file_sizes:  59%|███████████████▎          | 15.8M/26.8M [00:09<00:06, 1.78MB/s]    file_sizes:  60%|███████████████▋          | 16.1M/26.8M [00:09<00:06, 1.75MB/s]    file_sizes:  61%|███████████████▉          | 16.4M/26.8M [00:09<00:05, 1.79MB/s]    file_sizes:  62%|████████████████▏         | 16.7M/26.8M [00:09<00:05, 1.89MB/s]    file_sizes:  63%|████████████████▍         | 17.0M/26.8M [00:09<00:05, 1.95MB/s]    file_sizes:  64%|████████████████▋         | 17.2M/26.8M [00:09<00:04, 1.96MB/s]    file_sizes:  65%|████████████████▉         | 17.5M/26.8M [00:09<00:04, 2.03MB/s]    file_sizes:  66%|█████████████████▏        | 17.8M/26.8M [00:10<00:04, 2.16MB/s]    file_sizes:  67%|█████████████████▍        | 18.0M/26.8M [00:10<00:03, 2.20MB/s]    file_sizes:  69%|█████████████████▊        | 18.4M/26.8M [00:10<00:03, 2.25MB/s]    file_sizes:  71%|██████████████████▌       | 19.1M/26.8M [00:10<00:02, 2.88MB/s]    file_sizes:  73%|██████████████████▉       | 19.5M/26.8M [00:11<00:06, 1.16MB/s]    file_sizes:  74%|███████████████████▉       | 19.7M/26.8M [00:11<00:08, 841kB/s]    file_sizes:  75%|████████████████████▏      | 20.0M/26.8M [00:12<00:06, 983kB/s]    file_sizes:  76%|███████████████████▋      | 20.3M/26.8M [00:12<00:05, 1.10MB/s]    file_sizes:  77%|███████████████████▉      | 20.5M/26.8M [00:12<00:05, 1.20MB/s]    file_sizes:  77%|████████████████████▏     | 20.7M/26.8M [00:12<00:04, 1.22MB/s]    file_sizes:  79%|████████████████████▍     | 21.1M/26.8M [00:12<00:03, 1.51MB/s]    file_sizes:  80%|████████████████████▋     | 21.3M/26.8M [00:12<00:03, 1.42MB/s]    file_sizes:  84%|█████████████████████▋    | 22.4M/26.8M [00:13<00:03, 1.43MB/s]    file_sizes:  86%|██████████████████████▏   | 22.9M/26.8M [00:14<00:02, 1.30MB/s]    file_sizes:  87%|██████████████████████▌   | 23.3M/26.8M [00:14<00:02, 1.42MB/s]    file_sizes:  90%|███████████████████████▌  | 24.2M/26.8M [00:14<00:01, 2.07MB/s]    file_sizes: 100%|██████████████████████████| 26.8M/26.8M [00:14<00:00, 4.49MB/s]    file_sizes: 100%|██████████████████████████| 26.8M/26.8M [00:14<00:00, 1.82MB/s]






|

.. code-block:: Python



    import time
    import warnings
    import numpy as np
    from numpy.linalg import norm
    import matplotlib.pyplot as plt
    from libsvmdata import fetch_libsvm

    from sklearn.exceptions import ConvergenceWarning
    from sklearn.linear_model import Lasso as Lasso_sklearn
    from sklearn.linear_model import ElasticNet as Enet_sklearn

    from skglm import Lasso, ElasticNet

    warnings.filterwarnings('ignore', category=ConvergenceWarning)


    def compute_obj(X, y, w, alpha, l1_ratio=1):
        loss = norm(y - X @ w) ** 2 / (2 * len(y))
        penalty = (alpha * l1_ratio * np.sum(np.abs(w))
                   + 0.5 * alpha * (1 - l1_ratio) * norm(w) ** 2)
        return loss + penalty


    X, y = fetch_libsvm("news20.binary"
                        )
    alpha = np.max(np.abs(X.T @ y)) / len(y) / 10

    dict_sklearn = {}
    dict_sklearn["lasso"] = Lasso_sklearn(
        alpha=alpha, fit_intercept=False, tol=1e-12)

    dict_sklearn["enet"] = Enet_sklearn(
        alpha=alpha, fit_intercept=False, tol=1e-12, l1_ratio=0.5)

    dict_ours = {}
    dict_ours["lasso"] = Lasso(
        alpha=alpha, fit_intercept=False, tol=1e-12)
    dict_ours["enet"] = ElasticNet(
        alpha=alpha, fit_intercept=False, tol=1e-12, l1_ratio=0.5)

    models = ["lasso", "enet"]

    fig, axarr = plt.subplots(2, 1, constrained_layout=True)

    for ax, model, l1_ratio in zip(axarr, models, [1, 0.5]):
        pobj_dict = {}
        pobj_dict["sklearn"] = list()
        pobj_dict["us"] = list()

        time_dict = {}
        time_dict["sklearn"] = list()
        time_dict["us"] = list()

        # Remove compilation time
        dict_ours[model].max_iter = 10_000
        w_star = dict_ours[model].fit(X, y).coef_
        pobj_star = compute_obj(X, y, w_star, alpha, l1_ratio)
        for n_iter_sklearn in np.unique(np.geomspace(1, 50, num=15).astype(int)):
            dict_sklearn[model].max_iter = n_iter_sklearn

            t_start = time.time()
            w_sklearn = dict_sklearn[model].fit(X, y).coef_
            time_dict["sklearn"].append(time.time() - t_start)
            pobj_dict["sklearn"].append(compute_obj(X, y, w_sklearn, alpha, l1_ratio))

        for n_iter_us in range(1, 10):
            dict_ours[model].max_iter = n_iter_us
            t_start = time.time()
            w = dict_ours[model].fit(X, y).coef_
            time_dict["us"].append(time.time() - t_start)
            pobj_dict["us"].append(compute_obj(X, y, w, alpha, l1_ratio))

        ax.semilogy(
            time_dict["sklearn"], pobj_dict["sklearn"] - pobj_star, label='sklearn')
        ax.semilogy(
            time_dict["us"], pobj_dict["us"] - pobj_star, label='skglm')

        ax.set_ylim((1e-10, 1))
        ax.set_title(model)
        ax.legend()
        ax.set_ylabel("Objective suboptimality")

    axarr[1].set_xlabel("Time (s)")
    plt.show(block=False)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 17.123 seconds)


.. _sphx_glr_download_auto_examples_plot_compare_time.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_compare_time.ipynb <plot_compare_time.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_compare_time.py <plot_compare_time.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
