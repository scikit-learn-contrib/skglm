
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_compare_time.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_compare_time.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_compare_time.py:


=============================================
Timing comparison with scikit-learn for Lasso
=============================================
Compare time to solve large scale Lasso problems with scikit-learn.

.. GENERATED FROM PYTHON SOURCE LINES 9-95



.. image-sg:: /auto_examples/images/sphx_glr_plot_compare_time_001.png
   :alt: lasso, enet
   :srcset: /auto_examples/images/sphx_glr_plot_compare_time_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    file_sizes:   0%|                                   | 0.00/26.8M [00:00<?, ?B/s]    file_sizes:   0%|                          | 8.19k/26.8M [00:00<12:50, 34.7kB/s]    file_sizes:   0%|                          | 32.8k/26.8M [00:00<06:20, 70.3kB/s]    file_sizes:   0%|                          | 90.1k/26.8M [00:00<04:27, 99.6kB/s]    file_sizes:   1%|▏                           | 205k/26.8M [00:01<02:05, 211kB/s]    file_sizes:   1%|▎                           | 303k/26.8M [00:01<01:37, 272kB/s]    file_sizes:   1%|▎                           | 336k/26.8M [00:01<01:53, 232kB/s]    file_sizes:   1%|▍                           | 385k/26.8M [00:01<01:57, 225kB/s]    file_sizes:   2%|▌                           | 500k/26.8M [00:02<01:26, 303kB/s]    file_sizes:   2%|▌                           | 532k/26.8M [00:02<01:43, 252kB/s]    file_sizes:   2%|▋                           | 614k/26.8M [00:02<01:33, 279kB/s]    file_sizes:   2%|▋                           | 664k/26.8M [00:02<01:40, 259kB/s]    file_sizes:   3%|▊                           | 778k/26.8M [00:03<01:21, 320kB/s]    file_sizes:   3%|▊                           | 811k/26.8M [00:03<01:39, 261kB/s]    file_sizes:   3%|▉                           | 926k/26.8M [00:03<01:19, 326kB/s]    file_sizes:   4%|█                           | 975k/26.8M [00:03<01:28, 291kB/s]    file_sizes:   4%|█                          | 1.07M/26.8M [00:04<01:19, 322kB/s]    file_sizes:   4%|█▏                         | 1.14M/26.8M [00:04<01:23, 308kB/s]    file_sizes:   4%|█▏                         | 1.19M/26.8M [00:04<01:31, 279kB/s]    file_sizes:   5%|█▎                         | 1.30M/26.8M [00:04<01:14, 341kB/s]    file_sizes:   5%|█▎                         | 1.35M/26.8M [00:05<01:24, 302kB/s]    file_sizes:   5%|█▍                         | 1.45M/26.8M [00:05<01:15, 334kB/s]    file_sizes:   6%|█▌                         | 1.52M/26.8M [00:05<01:19, 318kB/s]    file_sizes:   6%|█▌                         | 1.56M/26.8M [00:05<01:28, 284kB/s]    file_sizes:   6%|█▋                         | 1.65M/26.8M [00:06<01:22, 303kB/s]    file_sizes:   6%|█▋                         | 1.73M/26.8M [00:06<01:19, 314kB/s]    file_sizes:   7%|█▊                         | 1.81M/26.8M [00:06<01:18, 319kB/s]    file_sizes:   7%|█▉                         | 1.89M/26.8M [00:06<01:18, 317kB/s]    file_sizes:   7%|█▉                         | 1.97M/26.8M [00:07<01:17, 320kB/s]    file_sizes:   8%|██                         | 2.06M/26.8M [00:07<01:15, 328kB/s]    file_sizes:   8%|██▏                        | 2.14M/26.8M [00:07<01:14, 332kB/s]    file_sizes:   8%|██▏                        | 2.22M/26.8M [00:07<01:13, 334kB/s]    file_sizes:   9%|██▍                        | 2.37M/26.8M [00:07<00:58, 420kB/s]    file_sizes:   9%|██▍                        | 2.43M/26.8M [00:08<01:04, 379kB/s]    file_sizes:  10%|██▌                        | 2.58M/26.8M [00:08<00:53, 453kB/s]    file_sizes:  10%|██▋                        | 2.65M/26.8M [00:08<01:00, 401kB/s]    file_sizes:  10%|██▊                        | 2.76M/26.8M [00:08<00:56, 427kB/s]    file_sizes:  11%|██▉                        | 2.92M/26.8M [00:09<00:47, 506kB/s]    file_sizes:  11%|███                        | 3.06M/26.8M [00:09<00:45, 518kB/s]    file_sizes:  12%|███▏                       | 3.19M/26.8M [00:09<00:44, 529kB/s]    file_sizes:  13%|███▍                       | 3.35M/26.8M [00:09<00:40, 576kB/s]    file_sizes:  13%|███▋                       | 3.61M/26.8M [00:10<00:33, 693kB/s]    file_sizes:  14%|███▋                       | 3.71M/26.8M [00:10<00:37, 622kB/s]    file_sizes:  15%|████                       | 3.97M/26.8M [00:10<00:31, 734kB/s]    file_sizes:  16%|████▏                      | 4.17M/26.8M [00:11<00:39, 580kB/s]    file_sizes:  17%|████▋                      | 4.63M/26.8M [00:11<00:31, 705kB/s]    file_sizes:  19%|█████                      | 5.02M/26.8M [00:12<00:29, 730kB/s]    file_sizes:  19%|█████▏                     | 5.15M/26.8M [00:12<00:31, 689kB/s]    file_sizes:  20%|█████▎                     | 5.25M/26.8M [00:12<00:33, 643kB/s]    file_sizes:  20%|█████▎                     | 5.32M/26.8M [00:12<00:38, 553kB/s]    file_sizes:  20%|█████▌                     | 5.48M/26.8M [00:13<00:37, 573kB/s]    file_sizes:  21%|█████▋                     | 5.64M/26.8M [00:13<00:35, 597kB/s]    file_sizes:  21%|█████▊                     | 5.74M/26.8M [00:13<00:38, 544kB/s]    file_sizes:  22%|█████▉                     | 5.91M/26.8M [00:13<00:36, 580kB/s]    file_sizes:  23%|██████                     | 6.07M/26.8M [00:14<00:34, 601kB/s]    file_sizes:  23%|██████▎                    | 6.23M/26.8M [00:14<00:32, 623kB/s]    file_sizes:  24%|██████▍                    | 6.33M/26.8M [00:14<00:36, 557kB/s]    file_sizes:  24%|██████▌                    | 6.50M/26.8M [00:14<00:33, 597kB/s]    file_sizes:  25%|██████▋                    | 6.66M/26.8M [00:15<00:32, 621kB/s]    file_sizes:  25%|██████▉                    | 6.82M/26.8M [00:15<00:31, 639kB/s]    file_sizes:  26%|███████                    | 6.96M/26.8M [00:15<00:33, 597kB/s]    file_sizes:  27%|███████▏                   | 7.12M/26.8M [00:15<00:31, 622kB/s]    file_sizes:  27%|███████▎                   | 7.22M/26.8M [00:16<00:34, 564kB/s]    file_sizes:  28%|███████▍                   | 7.38M/26.8M [00:16<00:32, 604kB/s]    file_sizes:  28%|███████▌                   | 7.54M/26.8M [00:16<00:30, 632kB/s]    file_sizes:  29%|███████▊                   | 7.71M/26.8M [00:16<00:29, 647kB/s]    file_sizes:  29%|███████▉                   | 7.87M/26.8M [00:17<00:28, 663kB/s]    file_sizes:  30%|████████                   | 8.00M/26.8M [00:17<00:29, 633kB/s]    file_sizes:  30%|████████▏                  | 8.17M/26.8M [00:17<00:28, 652kB/s]    file_sizes:  31%|████████▍                  | 8.33M/26.8M [00:17<00:27, 665kB/s]    file_sizes:  32%|████████▌                  | 8.46M/26.8M [00:17<00:28, 634kB/s]    file_sizes:  32%|████████▋                  | 8.63M/26.8M [00:18<00:28, 646kB/s]    file_sizes:  33%|████████▊                  | 8.79M/26.8M [00:18<00:27, 661kB/s]    file_sizes:  33%|█████████                  | 8.95M/26.8M [00:18<00:26, 674kB/s]    file_sizes:  34%|█████████▏                 | 9.12M/26.8M [00:18<00:26, 677kB/s]    file_sizes:  35%|█████████▎                 | 9.28M/26.8M [00:19<00:25, 683kB/s]    file_sizes:  35%|█████████▌                 | 9.45M/26.8M [00:19<00:25, 685kB/s]    file_sizes:  36%|█████████▊                 | 9.74M/26.8M [00:19<00:20, 832kB/s]    file_sizes:  37%|██████████                 | 9.94M/26.8M [00:19<00:20, 828kB/s]    file_sizes:  38%|██████████▏                | 10.1M/26.8M [00:20<00:19, 854kB/s]    file_sizes:  38%|██████████▎                | 10.3M/26.8M [00:20<00:21, 767kB/s]    file_sizes:  39%|██████████▋                | 10.6M/26.8M [00:20<00:17, 915kB/s]    file_sizes:  40%|██████████▊                | 10.7M/26.8M [00:20<00:19, 805kB/s]    file_sizes:  41%|██████████▋               | 11.1M/26.8M [00:21<00:15, 1.02MB/s]    file_sizes:  42%|██████████▉               | 11.3M/26.8M [00:21<00:15, 1.03MB/s]    file_sizes:  43%|███████████▏              | 11.6M/26.8M [00:21<00:14, 1.04MB/s]    file_sizes:  44%|███████████▊               | 11.8M/26.8M [00:21<00:15, 975kB/s]    file_sizes:  45%|███████████▋              | 12.1M/26.8M [00:21<00:13, 1.09MB/s]    file_sizes:  46%|████████████              | 12.4M/26.8M [00:22<00:12, 1.17MB/s]    file_sizes:  48%|████████████▍             | 12.8M/26.8M [00:22<00:11, 1.23MB/s]    file_sizes:  49%|████████████▊             | 13.2M/26.8M [00:22<00:09, 1.44MB/s]    file_sizes:  50%|█████████████             | 13.5M/26.8M [00:22<00:09, 1.34MB/s]    file_sizes:  52%|█████████████▌            | 13.9M/26.8M [00:23<00:08, 1.52MB/s]    file_sizes:  54%|█████████████▉            | 14.3M/26.8M [00:23<00:07, 1.56MB/s]    file_sizes:  56%|██████████████▌           | 15.0M/26.8M [00:23<00:06, 1.91MB/s]    file_sizes:  58%|███████████████           | 15.5M/26.8M [00:23<00:05, 1.99MB/s]    file_sizes:  59%|███████████████▍          | 15.9M/26.8M [00:24<00:05, 1.89MB/s]    file_sizes:  61%|███████████████▉          | 16.4M/26.8M [00:24<00:05, 1.90MB/s]    file_sizes:  64%|████████████████▌         | 17.0M/26.8M [00:24<00:04, 2.13MB/s]    file_sizes:  66%|█████████████████▏        | 17.7M/26.8M [00:24<00:03, 2.29MB/s]    file_sizes:  68%|█████████████████▊        | 18.3M/26.8M [00:25<00:03, 2.44MB/s]    file_sizes:  71%|██████████████████▍       | 19.0M/26.8M [00:25<00:03, 2.55MB/s]    file_sizes:  74%|███████████████████▎      | 19.9M/26.8M [00:25<00:02, 2.94MB/s]    file_sizes:  77%|████████████████████      | 20.7M/26.8M [00:25<00:01, 3.06MB/s]    file_sizes:  80%|████████████████████▊     | 21.5M/26.8M [00:26<00:01, 3.13MB/s]    file_sizes:  83%|█████████████████████▌    | 22.3M/26.8M [00:26<00:01, 3.19MB/s]    file_sizes:  86%|██████████████████████▎   | 23.0M/26.8M [00:26<00:01, 3.25MB/s]    file_sizes:  91%|███████████████████████▋  | 24.4M/26.8M [00:26<00:00, 3.90MB/s]    file_sizes:  94%|████████████████████████▍ | 25.1M/26.8M [00:26<00:00, 3.76MB/s]    file_sizes:  99%|█████████████████████████▋| 26.5M/26.8M [00:27<00:00, 4.29MB/s]    file_sizes: 100%|███████████████████████████| 26.8M/26.8M [00:27<00:00, 983kB/s]






|

.. code-block:: Python



    import time
    import warnings
    import numpy as np
    from numpy.linalg import norm
    import matplotlib.pyplot as plt
    from libsvmdata import fetch_libsvm

    from sklearn.exceptions import ConvergenceWarning
    from sklearn.linear_model import Lasso as Lasso_sklearn
    from sklearn.linear_model import ElasticNet as Enet_sklearn

    from skglm import Lasso, ElasticNet

    warnings.filterwarnings('ignore', category=ConvergenceWarning)


    def compute_obj(X, y, w, alpha, l1_ratio=1):
        loss = norm(y - X @ w) ** 2 / (2 * len(y))
        penalty = (alpha * l1_ratio * np.sum(np.abs(w))
                   + 0.5 * alpha * (1 - l1_ratio) * norm(w) ** 2)
        return loss + penalty


    X, y = fetch_libsvm("news20.binary"
                        )
    alpha = np.max(np.abs(X.T @ y)) / len(y) / 10

    dict_sklearn = {}
    dict_sklearn["lasso"] = Lasso_sklearn(
        alpha=alpha, fit_intercept=False, tol=1e-12)

    dict_sklearn["enet"] = Enet_sklearn(
        alpha=alpha, fit_intercept=False, tol=1e-12, l1_ratio=0.5)

    dict_ours = {}
    dict_ours["lasso"] = Lasso(
        alpha=alpha, fit_intercept=False, tol=1e-12)
    dict_ours["enet"] = ElasticNet(
        alpha=alpha, fit_intercept=False, tol=1e-12, l1_ratio=0.5)

    models = ["lasso", "enet"]

    fig, axarr = plt.subplots(2, 1, constrained_layout=True)

    for ax, model, l1_ratio in zip(axarr, models, [1, 0.5]):
        pobj_dict = {}
        pobj_dict["sklearn"] = list()
        pobj_dict["us"] = list()

        time_dict = {}
        time_dict["sklearn"] = list()
        time_dict["us"] = list()

        # Remove compilation time
        dict_ours[model].max_iter = 10_000
        w_star = dict_ours[model].fit(X, y).coef_
        pobj_star = compute_obj(X, y, w_star, alpha, l1_ratio)
        for n_iter_sklearn in np.unique(np.geomspace(1, 50, num=15).astype(int)):
            dict_sklearn[model].max_iter = n_iter_sklearn

            t_start = time.time()
            w_sklearn = dict_sklearn[model].fit(X, y).coef_
            time_dict["sklearn"].append(time.time() - t_start)
            pobj_dict["sklearn"].append(compute_obj(X, y, w_sklearn, alpha, l1_ratio))

        for n_iter_us in range(1, 10):
            dict_ours[model].max_iter = n_iter_us
            t_start = time.time()
            w = dict_ours[model].fit(X, y).coef_
            time_dict["us"].append(time.time() - t_start)
            pobj_dict["us"].append(compute_obj(X, y, w, alpha, l1_ratio))

        ax.semilogy(
            time_dict["sklearn"], pobj_dict["sklearn"] - pobj_star, label='sklearn')
        ax.semilogy(
            time_dict["us"], pobj_dict["us"] - pobj_star, label='skglm')

        ax.set_ylim((1e-10, 1))
        ax.set_title(model)
        ax.legend()
        ax.set_ylabel("Objective suboptimality")

    axarr[1].set_xlabel("Time (s)")
    plt.show(block=False)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 11.636 seconds)


.. _sphx_glr_download_auto_examples_plot_compare_time.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_compare_time.ipynb <plot_compare_time.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_compare_time.py <plot_compare_time.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
