
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_sparse_group_lasso.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_sparse_group_lasso.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_sparse_group_lasso.py:


=================================
Fast Sparse Group Lasso in python
=================================
Scikit-learn is missing a Sparse Group Lasso regression estimator. We show how to
implement one with ``skglm``.

.. GENERATED FROM PYTHON SOURCE LINES 8-11

.. code-block:: Python


    # Author: Mathurin Massias








.. GENERATED FROM PYTHON SOURCE LINES 12-26

.. code-block:: Python

    import numpy as np
    import matplotlib.pyplot as plt

    from skglm.solvers import GroupBCD
    from skglm.datafits import QuadraticGroup
    from skglm import GeneralizedLinearEstimator
    from skglm.penalties import WeightedL1GroupL2
    from skglm.utils.data import make_correlated_data, grp_converter

    n_features = 30
    X, y, _ = make_correlated_data(
        n_samples=10, n_features=30, random_state=0)









.. GENERATED FROM PYTHON SOURCE LINES 27-30

Model creation: combination of penalty, datafit and solver.

penalty:

.. GENERATED FROM PYTHON SOURCE LINES 30-40

.. code-block:: Python

    grp_size = 10  # take groups of 10 consecutive features
    n_groups = n_features // grp_size
    grp_indices, grp_ptr = grp_converter(grp_size, n_features)
    n_groups = len(grp_ptr) - 1
    weights_g = np.ones(n_groups, dtype=np.float64)
    weights_f = 0.5 * np.ones(n_features)
    penalty = WeightedL1GroupL2(
        alpha=0.5, weights_groups=weights_g,
        weights_features=weights_f, grp_indices=grp_indices, grp_ptr=grp_ptr)








.. GENERATED FROM PYTHON SOURCE LINES 41-46

.. code-block:: Python

    datafit = QuadraticGroup(grp_ptr, grp_indices)
    solver = GroupBCD(ws_strategy="fixpoint", verbose=1, fit_intercept=False, tol=1e-10)

    model = GeneralizedLinearEstimator(datafit, penalty, solver=solver)








.. GENERATED FROM PYTHON SOURCE LINES 47-48

Train the model

.. GENERATED FROM PYTHON SOURCE LINES 48-51

.. code-block:: Python

    clf = GeneralizedLinearEstimator(datafit, penalty, solver)
    clf.fit(X, y)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Iteration 1: 2.9165123923, stopping crit: 6.04e-01
    Iteration 2: 2.0255867844, stopping crit: 1.59e-01
    Iteration 3: 1.6875753707, stopping crit: 1.40e-02
    Iteration 4: 1.6804572587, stopping crit: 9.23e-05
    Iteration 5: 1.6804570767, stopping crit: 1.22e-05
    Iteration 6: 1.6804570709, stopping crit: 5.64e-07
    Iteration 7: 1.6804570709, stopping crit: 1.17e-08
    Iteration 8: 1.6804570709, stopping crit: 1.37e-11


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: "▸";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: "▾";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: "";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: "";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id="sk-container-id-2" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>GeneralizedLinearEstimator(datafit=QuadraticGroup, penalty=WeightedL1GroupL2, alpha=0.5)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-2" type="checkbox" checked><label for="sk-estimator-id-2" class="sk-toggleable__label sk-toggleable__label-arrow">GeneralizedLinearEstimator</label><div class="sk-toggleable__content"><pre>GeneralizedLinearEstimator(datafit=QuadraticGroup, penalty=WeightedL1GroupL2, alpha=0.5)</pre></div></div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 52-54

Some groups are fully 0, and inside non zero groups,
some values are 0 too

.. GENERATED FROM PYTHON SOURCE LINES 54-61

.. code-block:: Python

    plt.imshow(clf.coef_.reshape(-1, grp_size) != 0, cmap='Greys')
    plt.title("Non zero values (in black) in model coefficients")
    plt.ylabel('Group index')
    plt.xlabel('Feature index inside group')
    plt.xticks(np.arange(grp_size))
    plt.yticks(np.arange(n_groups));




.. image-sg:: /auto_examples/images/sphx_glr_plot_sparse_group_lasso_001.png
   :alt: Non zero values (in black) in model coefficients
   :srcset: /auto_examples/images/sphx_glr_plot_sparse_group_lasso_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    ([<matplotlib.axis.YTick object at 0x7fcd4055fc10>, <matplotlib.axis.YTick object at 0x7fcd4835ff10>, <matplotlib.axis.YTick object at 0x7fcd4833bd60>], [Text(0, 0, '0'), Text(0, 1, '1'), Text(0, 2, '2')])




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.680 seconds)


.. _sphx_glr_download_auto_examples_plot_sparse_group_lasso.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_sparse_group_lasso.ipynb <plot_sparse_group_lasso.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_sparse_group_lasso.py <plot_sparse_group_lasso.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_sparse_group_lasso.zip <plot_sparse_group_lasso.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
